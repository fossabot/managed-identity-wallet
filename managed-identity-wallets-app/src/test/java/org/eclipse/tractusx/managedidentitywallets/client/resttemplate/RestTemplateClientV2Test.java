package org.eclipse.tractusx.managedidentitywallets.client.resttemplate;

import io.restassured.http.Header;
import lombok.SneakyThrows;
import org.eclipse.tractusx.managedidentitywallets.api.v2.ApiRolesV2;
import org.eclipse.tractusx.managedidentitywallets.client.v2.resttemplate.ApiClient;
import org.eclipse.tractusx.managedidentitywallets.client.v2.resttemplate.controllers.AdministratorManagedIdentityWalletApiV2;
import org.eclipse.tractusx.managedidentitywallets.client.v2.resttemplate.controllers.UserManagedIdentityWalletApiV2;
import org.eclipse.tractusx.managedidentitywallets.models.Wallet;
import org.eclipse.tractusx.managedidentitywallets.test.MiwTestCase;
import org.eclipse.tractusx.managedidentitywallets.test.util.TestAuthV2Util;
import org.eclipse.tractusx.managedidentitywallets.test.util.TestPersistenceUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.web.client.HttpClientErrorException;

import java.util.List;

/**
 * Test class for the API v2 client generated by OpenAPI Generator project 'managed-identity-wallets-client-resttemplate-v2'.
 * <p>
 * This class does not test the whole API, it functions mainly as simple functional/smoke test for the generated client. The actual tests for the API are more contract like written in rest assured.
 */
public class RestTemplateClientV2Test extends MiwTestCase {


    private UserManagedIdentityWalletApiV2 userManagedIdentityWalletApiV2 = null;
    private AdministratorManagedIdentityWalletApiV2 administratorManagedIdentityWalletApiV2 = null;

    @Autowired
    private TestAuthV2Util testAuthV2Util;

    @Autowired
    private TestPersistenceUtil testPersistenceUtil;

    @LocalServerPort
    private int port;

    @Test
    @SneakyThrows
    public void getWalletTestSuccess() {
        initializeClient(ApiRolesV2.WALLET_OWNER);
        var userWallet = userManagedIdentityWalletApiV2.userGetWallet();

        Assertions.assertNotNull(userWallet.getId());
    }

    @Test
    @SneakyThrows
    public void getWalletTestUnauthorized() {
        initializeClient(ApiRolesV2.ADMIN);

        Assertions.assertThrows(HttpClientErrorException.class, () ->
                userManagedIdentityWalletApiV2.userGetWallet());
    }

    @Test
    @SneakyThrows
    public void getWalletsSuccess() {
        initializeClient(ApiRolesV2.ADMIN);
        var userWallet = administratorManagedIdentityWalletApiV2.adminGetWallets(0, 1);

        Assertions.assertEquals(1, userWallet.getSize());
    }

    @Test
    @SneakyThrows
    public void getWalletsUnauthorized() {
        initializeClient(ApiRolesV2.WALLET_OWNER);

        Assertions.assertThrows(HttpClientErrorException.class, () ->
                administratorManagedIdentityWalletApiV2.adminGetWallets(0, 1));
    }

    private void initializeClient(String role) {

        final Wallet wallet = testPersistenceUtil.newWalletPersisted();
        final List<String> roles = List.of(role);
        final Header header = testAuthV2Util.getAuthHeader(roles, wallet);

        final ApiClient apiClient = new ApiClient();
        apiClient.addDefaultHeader(header.getName(), header.getValue());
        apiClient.setBasePath("http://localhost:" + port + "/api/v2");

        userManagedIdentityWalletApiV2 = new UserManagedIdentityWalletApiV2(apiClient);
        administratorManagedIdentityWalletApiV2 = new AdministratorManagedIdentityWalletApiV2(apiClient);
    }
}
